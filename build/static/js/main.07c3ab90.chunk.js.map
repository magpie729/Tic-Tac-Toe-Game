{"version":3,"sources":["components/Square.jsx","components/Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["SquareButton","styled","button","Square","value","handleClick","index","onClick","Container","div","MainTitle","h1","GameBoard","RestartButton","Board","useState","Array","fill","board","setBoard","turn","setTurn","winner","squares","lines","i","length","a","b","c","calculateWinner","console","log","newBoard","splice","map","cell","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAIMA,EAAeC,IAAOC,OAAV,6PAqBHC,EAVA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACrC,OACC,8BACC,cAACN,EAAD,CAAcO,QAAS,kBAAMF,EAAYC,IAAzC,SACEF,OCbCI,EAAYP,IAAOQ,IAAV,iGAKTC,EAAYT,IAAOU,GAAV,iIAUTC,EAAYX,IAAOQ,IAAV,sJAQTI,EAAgBZ,IAAOC,OAAV,gVAoCnB,IAuCeY,EAvCD,WAEb,MAA0BC,mBAASC,MAAM,GAAGC,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAzBP,SAAyBC,GAYxB,IAXA,IAAMC,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGCC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACtC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACrE,OAAON,EAAQI,GAGjB,OAAO,KAOQG,CAAgBZ,GAEzBb,EAAc,SAACC,GAEpB,GADAyB,QAAQC,IAAI,CAAC1B,YACTA,EAAQ,GAAKA,EAAQ,GAAKY,EAAMZ,IAAUgB,GAA9C,CACA,IAAMW,EAAQ,YAAOf,GACrBe,EAASC,OAAO5B,EAAO,EAAGc,GAC1BD,EAASc,GAETZ,EADyB,MAATD,EAAe,IAAM,OAQtC,OACC,eAACZ,EAAD,WACC,eAACE,EAAD,yBAAsB,+CAAtB,WACEY,GAAU,iDAAoBA,KAChC,cAACV,EAAD,UACEM,EAAMiB,KAAI,SAACC,EAAM9B,GAAP,OACV,cAAC,EAAD,CAECF,MAAOgC,EACP9B,MAAOA,EACPD,YAAaA,GAHRC,QAOR,cAACO,EAAD,CAAeN,QAlBK,WACrBY,EAASH,MAAM,GAAGC,KAAK,MAiBtB,gCCxFYoB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.07c3ab90.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n// styles\r\nconst SquareButton = styled.button `\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tfont-size: 46px;\r\n\tcolor: #fff;\r\n\tborder: 2px solid rgba(255, 255, 255, 0.125);\r\n\tborder-radius: 15px;\r\n\tbackground-color: rgba(255, 255, 255, 0.1);\r\n\tbackground-filter: blur(20px);\r\n`\r\n\r\nconst Square = ({ value, handleClick, index }) => {   //with index we will understand which button was clicked\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<SquareButton onClick={() => handleClick(index)}>\r\n\t\t\t\t{value}\r\n\t\t\t</SquareButton>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Square;\r\n\r\n// our steps\r\n// 1. we  ","import React, { useState, useEffect } from 'react';\r\nimport Square from './Square';\r\nimport styled from 'styled-components';\r\nimport { Component } from 'react';\r\n\r\n// styles\r\nconst Container = styled.div `\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tflex-direction: column;\r\n`\r\nconst MainTitle = styled.h1 `\r\n\tmargin-bottom: 35px;\r\n\tfont-weight: 700;\r\n\tcolor: #fff;\r\n\r\n\t& span {\r\n\t\tcolor: #696EFF;\r\n\t}\r\n` \r\n\r\nconst GameBoard = styled.div `\r\n\twidth: 300px;\r\n\tdisplay: grid;\r\n\tgrid-template-columns: repeat(3, auto);\r\n\tgrid-gap: 5px;\r\n    border-radius: 15px;\r\n`\r\n\r\nconst RestartButton = styled.button `\r\n\tmargin: 20px auto;\r\n\tpadding: 12px 35px;\r\n\tfont-size: 18px;\r\n\tcolor: #fff;\r\n\tborder-radius: 30px;\r\n\tbackground-image: linear-gradient(60deg, #696EFF, #F8ACFF);\r\n\ttransition: 0.5s all ease-out;\r\n\r\n\t&:hover {\r\n\t\tcolor: #3e3e3e;\r\n\t\tbackground-image: linear-gradient(60deg, #F8ACFF, #ffffff);\r\n\t}\r\n`\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6]\r\n\t];\r\n\t\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nconst Board = () => {\r\n\r\n\tconst [board, setBoard] = useState(Array(9).fill(''));\r\n\tconst [turn, setTurn] = useState('');\r\n\tconst winner = calculateWinner(board);\r\n\r\n\tconst handleClick = (index) => {\r\n\t\tconsole.log({index});\r\n\t\tif (index < 0 || index > 9 || board[index] || winner) return\r\n\t\tconst newBoard = [...board]\r\n\t\tnewBoard.splice(index, 1, turn)\r\n\t\tsetBoard(newBoard)\r\n\t\tconst newTurn = turn === 'O' ? 'X' : 'O'\r\n\t\tsetTurn(newTurn)\r\n\t}\r\n\r\n\tconst handleRestart = () => {\r\n\t\tsetBoard(Array(9).fill(''));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container>\r\n\t\t\t<MainTitle>Welcome to <span>Tic Tac Toe</span> Game</MainTitle>\r\n\t\t\t{(winner && <h2>The winner is: {winner}</h2>)}\r\n\t\t\t<GameBoard>\r\n\t\t\t\t{board.map((cell, index) => (\r\n\t\t\t\t\t<Square \r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tvalue={cell}\r\n\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\thandleClick={handleClick}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</GameBoard>\r\n\t\t\t<RestartButton onClick={handleRestart}>Start New Game</RestartButton>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default Board;\r\n","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}